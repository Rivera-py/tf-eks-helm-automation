name: Terraform

on:
  workflow_call:
    inputs:
      action:
        required: true
        type: string
        description: 'The action to perform, e.g., "apply", "plan", "destroy".'
      stack:
        required: false
        type: string
        default: 'aws'
        description: 'The stack name for the Terraform execution.'
      environment:
        required: true
        type: string
        description: 'The environment for the Terraform execution, e.g., "dev", "staging", "prod".'
      aws_region:
        required: false
        type: string
        default: 'eu-west-2'
        description: 'The AWS region to configure credentials for.'
      role:
        required: false
        type: string
        default: 'arn:aws:iam::299858989921:role/github-actions-oidc-role'
        description: 'The AWS IAM role to assume for the GitHub Actions workflow.'
      state_bucket_prefix:
        required: false
        type: string
        default: 's3-tf-eks-helm-automation-state'
        description: 'The prefix for the S3 bucket used for Terraform state.'

jobs:
  test:
    name: 'Terraform Plan and Test - ${{ inputs.stack }} - ${{ inputs.environment }}'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ${{ github.workspace }}/${{ inputs.stack }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ inputs.role }}
          role-session-name: GitHubActionsSessionTest

      - name: Init
        run: |
          account_id=$(aws account get-account-information --query AccountId --output text)
          state_bucket="${{ inputs.state_bucket_prefix }}-$account_id-${{ inputs.aws_region }}"
          terraform init \
            -input=false \
            -backend-config="bucket=$state_bucket" \
            -backend-config="key=${{ inputs.stack }}/terraform.tfstate" \
            -backend-config="region=${{ inputs.aws_region }}"

      - name: Workspace
        run: terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }}

      - name: Format
        run: terraform fmt -check --recursive || echo "::warning file=terraform-aws::Terraform format check failed"

      - name: Validate
        run: terraform validate || echo "::warning file=terraform-aws::Terraform validation failed"

      - name: Plan
        run: |
          mkdir plan tests
          terraform plan \
            -out=plan/tfplan \
            -input=false \
            -var-file=environments/${{ inputs.environment }}.tfvars || echo "::warning file=terraform-aws::Terraform plan failed"
          terraform show -json plan/tfplan > plan/plan.json

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Run TFLint
        run: |
          config_file="${{ github.workspace }}/.github/workflows/resources/.tflint.hcl"
          tflint --init --config "$config_file"
          tflint \
            --var-file=environments/${{ inputs.environment }}.tfvars \
            --config "$config_file" \
            --format junit > tests/tflint.xml || echo "::warning file=terraform-aws::TFLint failed"

      - name: Install and run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          file: ${{ github.workspace }}/${{ inputs.stack }}/plan/plan.json
          output_format: junitxml
          output_file_path: ${{ github.workspace }}/${{ inputs.stack }}/tests/

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            ${{ github.workspace }}/${{ inputs.stack }}/tests/results_junitxml.xml
            ${{ github.workspace }}/${{ inputs.stack }}/tests/tflint.xml

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ github.workspace }}/${{ inputs.stack }}/plan/*
          if-no-files-found: error

  approval:
    name: 'Manual Approval for Terraform - ${{ inputs.stack }} - ${{ inputs.environment }}'
    runs-on: ubuntu-latest
    needs: test
    if: ${{ inputs.action != 'plan' }}
    steps:
      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor}}
          issue-title: 'Terraform Approval for ${{ inputs.stack }} - ${{ inputs.environment }}'
          issue-body: |
            Please review the Terraform plan and approve or reject the changes.
            - Stack: ${{ inputs.stack }}
            - Environment: ${{ inputs.environment }}
            - Action: ${{ inputs.action }}

  run:
    name: 'Run Terraform - ${{ inputs.stack }} - ${{ inputs.environment }} - ${{ inputs.action }}'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: approval
    if: ${{ inputs.action != 'plan'}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ inputs.role }}
          role-session-name: GitHubActionsSessionDeploy

      - name: Init
        run: |
          mkdir plan
          account_id=$(aws account get-account-information --query AccountId --output text)
          state_bucket="${{ inputs.state_bucket_prefix }}-$account_id-${{ inputs.aws_region }}"
          terraform init \
            -input=false \
            -backend-config="bucket=$state_bucket" \
            -backend-config="key=${{ inputs.stack }}/terraform.tfstate" \
            -backend-config="region=${{ inputs.aws_region }}"

      - name: Workspace
        run: terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }}
      
      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ github.workspace }}/${{ inputs.stack }}/plan

      - name: Run Terraform Action
        run: |
          terraform ${{ inputs.action }} plan/tfplan \
            -auto-approve \
            -input=false \
            -var-file=environments/${{ inputs.environment }}.tfvars || echo "::warning file=terraform-${{ inputs.stack}}::Terraform ${{ inputs.action }} failed"